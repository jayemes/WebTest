{"version":3,"sources":["Components/ThreeDElement.js","Components/Slider.js","Components/App.js","serviceWorker.js","index.js"],"names":["ThreeDElement","myRef","React","createRef","canvas","myScene","renderer","THREE","setSize","this","domElement","id","scene","camera","position","set","lookAt","controls","OrbitControls","add","createGeometry","generatePoints","render","animate","requestAnimationFrame","update","points","r1","props","r2","k0","k1","k2","i","nopsLow","nopsHigh","x1","Math","sin","cos","y1","z1","x","y","z","push","createLineGeometry","lines","name","material","createPositionalMaterial","geometry","setFromPoints","line","nops","length","color","setHSL","cube","random","xMax","max","map","it","xMin","min","yMax","yMin","zMax","zMin","fShader","vertexShader","fragmentShader","uniforms","obj","getObjectByName","remove","createCanvas","current","appendChild","updateScene","ref","Component","Slider","config","digits","log10","step","valText","Intl","NumberFormat","minimumFractionDigits","format","val","className","htmlFor","type","value","onChange","App","state","handleChange","bind","sliders","e","target","setState","prevState","action","item","idx","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1b3dba4d.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport React from 'react'\r\nimport '../Style/ThreeDElement.css'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nclass ThreeDElement extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.myRef = React.createRef();\r\n        this.canvas = null\r\n        this.myScene = null\r\n    }\r\n\r\n    createCanvas() {\r\n        var renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(700, 700, false);\r\n        this.canvas = renderer.domElement\r\n        this.canvas.id = \"3DC\"\r\n\r\n        var scene = new THREE.Scene();\r\n        var camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n\r\n        camera.position.set(70, 70, 70);\r\n        camera.lookAt(0, 0, 0);\r\n\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n        scene.add(this.createGeometry(this.generatePoints()))\r\n\r\n        renderer.render(scene, camera);\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        animate()\r\n        return scene\r\n    }\r\n\r\n    generatePoints() {\r\n        var points = [];\r\n\r\n        const r1 = this.props.r1\r\n        const r2 = this.props.r2\r\n\r\n        const k0 = this.props.k0\r\n        const k1 = this.props.k1\r\n\r\n        const k2 = this.props.k2\r\n\r\n        const nopsLow = 0\r\n        const nopsHigh = 2000\r\n        const delta = .02;\r\n\r\n        for (let i = nopsLow * delta; i <= nopsHigh * delta; i += delta) {\r\n\r\n            const x1 = r1 * Math.sin(k0 * i) * Math.cos(k1 * i);\r\n            const y1 = r1 * Math.sin(k0 * i) * Math.sin(k1 * i);\r\n            const z1 = r1 * Math.cos(k0 * i) + i;\r\n            //z = i;\r\n\r\n            const x2 = r2 * Math.sin(k2 * i) * Math.cos(k2 * i);\r\n            const y2 = r2 * Math.sin(k2 * i) * Math.sin(k2 * i);\r\n            const z2 = r2 * Math.cos(k2 * i);\r\n\r\n            const x = x1 + x2\r\n            const y = y1 + y2\r\n            const z = z1 + z2\r\n\r\n            points.push(new THREE.Vector3(x, y, z));\r\n        }\r\n        return points\r\n    }\r\n\r\n    createGeometry(points) {\r\n        return this.createLineGeometry(points)\r\n        // return this.createCubesGeometry(points)\r\n    }\r\n\r\n    // createGeometryBySegments(points) {\r\n    //     const lines = new THREE.Object3D()\r\n    //     lines.name = \"Lines\"\r\n\r\n    //     const nops = points.length\r\n    //     let material = null\r\n\r\n    //     for (let i = 0; i < nops - 1; i++) {\r\n    //         const start = points[i]\r\n    //         const end = points[i + 1]\r\n\r\n    //         material = new THREE.LineBasicMaterial({});\r\n    //         material.color.setHSL(i / nops, 1, 0.5)\r\n\r\n    //         var geometry = new THREE.BufferGeometry().setFromPoints([start, end]);\r\n    //         var line = new THREE.Line(geometry, material);\r\n    //         lines.add(line);\r\n    //     }\r\n    //     return lines\r\n    // }\r\n\r\n    createLineGeometry(points) {\r\n        const lines = new THREE.Object3D()\r\n        lines.name = \"Lines\"\r\n\r\n        const material = this.createPositionalMaterial(points)\r\n\r\n        var geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n        var line = new THREE.Line(geometry, material);\r\n        lines.add(line);\r\n\r\n        return lines\r\n    }\r\n\r\n    createCubesGeometry(points) {\r\n        const lines = new THREE.Object3D()\r\n        lines.name = \"Lines\"\r\n\r\n        const nops = points.length\r\n\r\n\r\n        const geometry = new THREE.IcosahedronBufferGeometry(1)\r\n\r\n        for (let i = 0; i < nops - 1; i += 5) {\r\n            let material = new THREE.MeshBasicMaterial({});\r\n            material.color.setHSL(i / nops, 1, 0.5)\r\n            var cube = new THREE.Mesh(geometry, material);\r\n            cube.position.set(points[i].x + Math.random(), points[i].y, points[i].z)\r\n            lines.add(cube);\r\n        }\r\n        return lines\r\n    }\r\n\r\n    createPositionalMaterial(points) {\r\n        const xMax = Math.max(...points.map(it => it.x))\r\n        const xMin = Math.min(...points.map(it => it.x))\r\n\r\n        const yMax = Math.max(...points.map(it => it.y))\r\n        const yMin = Math.min(...points.map(it => it.y))\r\n\r\n        const zMax = Math.max(...points.map(it => it.z))\r\n        const zMin = Math.min(...points.map(it => it.z))\r\n\r\n        const vShader = `\r\n            varying vec3 pos;\r\n\r\n            void main() {\r\n            pos = position;\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n            }\r\n            `\r\n        const fShader = `\r\n            varying vec3 pos;\r\n\r\n            void main() {\r\n            gl_FragColor = vec4((0.2 + 0.8*(pos.x-(${xMin}))/(${xMax}-(${xMin}))),\r\n                                (0.2 + 0.8*(pos.y-(${yMin}))/(${yMax}-(${yMin}))),\r\n                                (0.2 + 0.8*(pos.z-(${zMin}))/(${zMax}-(${zMin}))),\r\n                                1.0).rgba;\r\n            }\r\n            `\r\n\r\n        return new THREE.ShaderMaterial({\r\n            vertexShader: vShader,\r\n            fragmentShader: fShader,\r\n            uniforms: {}\r\n        });\r\n    }\r\n\r\n    updateScene() {\r\n        const obj = this.myScene.getObjectByName(\"Lines\")\r\n        this.myScene.remove(obj)\r\n        this.myScene.add(this.createGeometry(this.generatePoints()))\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log(\"Mount\")\r\n        this.myScene = this.createCanvas()\r\n        this.myRef.current.appendChild(this.canvas)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // console.log(\"Update\")\r\n        this.updateScene(this.myScene)\r\n    }\r\n\r\n    render() {\r\n\r\n        // return container\r\n        return (\r\n            <div id=\"canvas-container\" ref={this.myRef}></div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ThreeDElement\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport '../Style/Slider.css'\r\n\r\nclass Slider extends React.Component {\r\n\r\n    render() {\r\n        const config = this.props.config\r\n        const digits = -Math.log10(config.step) + 1\r\n        let valText = new Intl.NumberFormat('en-US', { minimumFractionDigits: digits }).format(this.props.val)\r\n        \r\n        return (\r\n            <div className=\"slider-container\">\r\n                <label htmlFor={config.name}>{config.name}</label>\r\n                <input\r\n                    type=\"range\"\r\n                    name={config.name}\r\n                    id={config.name}\r\n                    min={config.min}\r\n                    max={config.max}\r\n                    step={config.step}\r\n                    value={this.props.val}\r\n                    onChange={config.onChange}\r\n                />\r\n                <span className=\"slider-value\" >{valText}</span>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Slider","import React from 'react';\nimport '../Style/App.css';\nimport ThreeDElement from './ThreeDElement'\nimport Slider from './Slider'\n\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            k0: 2.3,\n            k1: 0.15,\n            k2: 2.4,\n            r1: 30,\n            r2: 10\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n\n        this.sliders = [\n            {\n                name: \"k0\",\n                min: -10,\n                max: 10,\n                step: 0.1,\n                onChange: this.handleChange\n            }, {\n                name: \"k1\",\n                min: -1,\n                max: 1,\n                step: 0.05,\n                onChange: this.handleChange\n            }, {\n                name: \"k2\",\n                min: -10,\n                max: 10,\n                step: 0.1,\n                onChange: this.handleChange\n            }, {\n                name: \"r1\",\n                min: 0,\n                max: 100,\n                step: 1,\n                onChange: this.handleChange\n            }, {\n                name: \"r2\",\n                min: 0,\n                max: 100,\n                step: 1,\n                onChange: this.handleChange\n            },\n        ]\n\n    }\n\n\n    handleChange(e) {\n        let name = e.target.name\n        let value = e.target.value\n        this.setState(prevState => {\n            return { [name]: value }\n        })\n    }\n\n    render() {\n        // this.sliders.forEach((item) => console.log(this.state[item.name]))\n\n        return (\n\n            <div className=\"App\">\n                <div className=\"App-header\">\n\n                    <form action=\"\">\n                        {this.sliders.map((item, idx) =>\n                            <Slider val={this.state[item.name]} config={item} key={idx} />)}\n\n                    </form>\n\n\n\n                </div>\n\n                <ThreeDElement\n                    k0={this.state.k0}\n                    k1={this.state.k1}\n                    k2={this.state.k2}\n                    r1={this.state.r1}\n                    r2={this.state.r2} />\n\n\n\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App></App>\n\n  // </React.StrictMode>,\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}